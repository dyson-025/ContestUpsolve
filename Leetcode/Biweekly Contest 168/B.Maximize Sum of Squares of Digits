📘 FINAL NOTES — Maximize Sum of Squares of Digits
💡 Problem Statement (in simple words)

You are given two integers:

num → number of digits

sum → total sum of digits

Find the largest possible number (as a string) having:

Exactly num digits

Sum of all digits = sum

The sum of squares of digits is maximum

If no such number exists, return "".

⚙️ Key Idea

To maximize the sum of squares,
➡️ put the largest digits (like 9, 8, 7) first.

So we use greedy approach:

Fill from left to right

Each digit = min(9, remaining_sum)

Subtract it from remaining sum

If at the end, sum becomes 0 → valid number.
If at start, sum > 9 * num → impossible → return "".

🧠 Step-by-Step Example
Example 1:
num = 2, sum = 3

Step	Remaining sum	Choose digit	Result
1	3	min(9,3)=3	"3"
2	0	min(9,0)=0	"30"

✅ Output → "30"

Example 2:
num = 2, sum = 17

Step	Remaining sum	Choose digit	Result
1	17	9	"9"
2	8	8	"98"

✅ Output → "98"

Example 3:
num = 2, sum = 19


Max possible sum = 9 + 9 = 18 < 19
❌ Not possible → return ""

🧮 Complexity
Metric	Value
Time	O(num)
Space	O(num)
💻 C++ Code (✅ using to_string())
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    string maximizeSumOfSquares(int num, int sum) {
        int drevantor = sum;  // just storing as per question instruction
        if (drevanter > 9 * num) return "";  // not possible

        string result = "";
        for (int i = 0; i < num; i++) {
            int digit = min(9, sum);
            result += to_string(digit);  // ✅ built-in conversion
            sum -= digit;
        }
        return result;
    }
};

int main() {
    Solution sol;
    cout << sol.maximizeSumOfSquares(2, 3) << endl;   // 30
    cout << sol.maximizeSumOfSquares(2, 17) << endl;  // 98
    cout << sol.maximizeSumOfSquares(2, 19) << endl;  // ""
}

💻 C++ Code (✅ manual digit → string conversion)
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    string maximizeSumOfSquares(int num, int sum) {
        int drevantor = sum;  // store input midway
        if (drevanter > 9 * num) return "";

        string result = "";
        for (int i = 0; i < num; i++) {
            int digit = min(9, sum);
            
            // manual int → char → string conversion
            char c = '0' + digit;     // int -> char
            string s(1, c);           // char -> string
            result += s;
            
            sum -= digit;
        }

        return result;
    }
};

int main() {
    Solution sol;
    cout << sol.maximizeSumOfSquares(2, 3) << endl;   // 30
    cout << sol.maximizeSumOfSquares(2, 17) << endl;  // 98
    cout << sol.maximizeSumOfSquares(2, 19) << endl;  // ""
}

🧩 Manual Conversion Quick Guide
Conversion	Code
int → char	'0' + d
char → int	c - '0'
int → string (1 digit)	string(1, '0' + d)
int → string (multiple digits)	loop using %10 and '0' + digit
🚀 Final Summary
Step	Action
1️⃣	Check if sum > 9 * num → return ""
2️⃣	Start from left → choose digit = min(9, sum)
3️⃣	Append digit to result
4️⃣	Subtract from sum
5️⃣	Return result

✅ Greedy + simple arithmetic = Maximum score
✅ Works for huge input sizes (up to 2×10⁵ digits)
